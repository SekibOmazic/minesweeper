Elm.Repl = Elm.Repl || {};
Elm.Repl.make = function (_elm) {
   "use strict";
   _elm.Repl = _elm.Repl || {};
   if (_elm.Repl.values)
   return _elm.Repl.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Repl",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var tsol = {ctor: "_Tuple0"};
   var generatePositions = F5(function (n,
   rows,
   cols,
   positions,
   seed) {
      return _U.eq($List.length(positions),
      n) ? positions : function () {
         var $ = A2($Random.generate,
         A2($Random.$int,1,rows),
         seed),
         x = $._0,
         seed1 = $._1;
         var $ = A2($Random.generate,
         A2($Random.$int,1,cols),
         seed1),
         y = $._0,
         seed2 = $._1;
         return function () {
            var _v0 = A2($List.member,
            {ctor: "_Tuple2",_0: x,_1: y},
            positions);
            switch (_v0)
            {case false:
               return A5(generatePositions,
                 n,
                 rows,
                 cols,
                 A2($List._op["::"],
                 {ctor: "_Tuple2",_0: x,_1: y},
                 positions),
                 seed2);
               case true:
               return A5(generatePositions,
                 n,
                 rows,
                 cols,
                 positions,
                 seed2);}
            _U.badCase($moduleName,
            "between lines 15 and 17");
         }();
      }();
   });
   var positions = A5(generatePositions,
   12,
   5,
   5,
   _L.fromArray([]),
   $Random.initialSeed(12345));
   var deltron3030 = positions;
   var Covered = {ctor: "Covered"};
   var matrix2 = A2($List.map,
   function (row) {
      return A2($List.map,
      function (col) {
         return {_: {}
                ,position: {ctor: "_Tuple2"
                           ,_0: row
                           ,_1: col}
                ,state: Covered};
      },
      _L.range(1,5));
   },
   _L.range(1,5));
   var Cleared = {ctor: "Cleared"};
   _elm.Repl.values = {_op: _op
                      ,Cleared: Cleared
                      ,Covered: Covered
                      ,deltron3030: deltron3030
                      ,generatePositions: generatePositions
                      ,matrix2: matrix2
                      ,positions: positions
                      ,tsol: tsol};
   return _elm.Repl.values;
};